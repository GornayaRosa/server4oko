// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace config {
constexpr Camera::Camera(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cam_roi_()
  , cam_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cam_user_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cam_pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cam_model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cam_group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cam_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cam_is_active_(false)
  , cam_frame_period_(1000)
  , cam_prio_(1)
  , cam_frame_height_(1080)
  , cam_frame_width_(1920){}
struct CameraDefaultTypeInternal {
  constexpr CameraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraDefaultTypeInternal() {}
  union {
    Camera _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraDefaultTypeInternal _Camera_default_instance_;
constexpr CamerasList::CamerasList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cam_(){}
struct CamerasListDefaultTypeInternal {
  constexpr CamerasListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CamerasListDefaultTypeInternal() {}
  union {
    CamerasList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CamerasListDefaultTypeInternal _CamerasList_default_instance_;
constexpr MotionDetectorParams::MotionDetectorParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : movdet_color_tresh_(0)
  , movdet_diff_tresh_(0)
  , movdet_timer_period_(30){}
struct MotionDetectorParamsDefaultTypeInternal {
  constexpr MotionDetectorParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionDetectorParamsDefaultTypeInternal() {}
  union {
    MotionDetectorParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionDetectorParamsDefaultTypeInternal _MotionDetectorParams_default_instance_;
constexpr Event::Event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : class_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , class_num_(0)
  , class_main_timer_(30)
  , class_sub_timer_(120){}
struct EventDefaultTypeInternal {
  constexpr EventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventDefaultTypeInternal _Event_default_instance_;
constexpr EventHandlerParams::EventHandlerParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_(){}
struct EventHandlerParamsDefaultTypeInternal {
  constexpr EventHandlerParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventHandlerParamsDefaultTypeInternal() {}
  union {
    EventHandlerParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventHandlerParamsDefaultTypeInternal _EventHandlerParams_default_instance_;
constexpr NNParams::NNParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conf_thresh_(0)
  , nms_thresh_(0){}
struct NNParamsDefaultTypeInternal {
  constexpr NNParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NNParamsDefaultTypeInternal() {}
  union {
    NNParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NNParamsDefaultTypeInternal _NNParams_default_instance_;
constexpr Config::Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cam_list_(nullptr)
  , movdet_params_(nullptr)
  , eh_params_(nullptr)
  , nn_params_(nullptr){}
struct ConfigDefaultTypeInternal {
  constexpr ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace config
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_config_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_2eproto = nullptr;

const uint32_t TableStruct_config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::config::Camera, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_url_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_user_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_pwd_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_is_active_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_model_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_frame_period_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_prio_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_roi_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_group_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_name_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_frame_height_),
  PROTOBUF_FIELD_OFFSET(::config::Camera, cam_frame_width_),
  0,
  1,
  2,
  6,
  3,
  7,
  8,
  ~0u,
  4,
  5,
  9,
  10,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::CamerasList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::CamerasList, cam_),
  PROTOBUF_FIELD_OFFSET(::config::MotionDetectorParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::MotionDetectorParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::MotionDetectorParams, movdet_color_tresh_),
  PROTOBUF_FIELD_OFFSET(::config::MotionDetectorParams, movdet_diff_tresh_),
  PROTOBUF_FIELD_OFFSET(::config::MotionDetectorParams, movdet_timer_period_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::config::Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Event, class_num_),
  PROTOBUF_FIELD_OFFSET(::config::Event, class_name_),
  PROTOBUF_FIELD_OFFSET(::config::Event, class_main_timer_),
  PROTOBUF_FIELD_OFFSET(::config::Event, class_sub_timer_),
  1,
  0,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::EventHandlerParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::EventHandlerParams, event_),
  PROTOBUF_FIELD_OFFSET(::config::NNParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::NNParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::NNParams, conf_thresh_),
  PROTOBUF_FIELD_OFFSET(::config::NNParams, nms_thresh_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::config::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Config, cam_list_),
  PROTOBUF_FIELD_OFFSET(::config::Config, server_ip_),
  PROTOBUF_FIELD_OFFSET(::config::Config, movdet_params_),
  PROTOBUF_FIELD_OFFSET(::config::Config, eh_params_),
  PROTOBUF_FIELD_OFFSET(::config::Config, nn_params_),
  1,
  0,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::config::Camera)},
  { 30, -1, -1, sizeof(::config::CamerasList)},
  { 37, 46, -1, sizeof(::config::MotionDetectorParams)},
  { 49, 59, -1, sizeof(::config::Event)},
  { 63, -1, -1, sizeof(::config::EventHandlerParams)},
  { 70, 78, -1, sizeof(::config::NNParams)},
  { 80, 91, -1, sizeof(::config::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::config::_Camera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::config::_CamerasList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::config::_MotionDetectorParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::config::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::config::_EventHandlerParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::config::_NNParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::config::_Config_default_instance_),
};

const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014config.proto\022\006config\"\220\002\n\006Camera\022\017\n\007cam"
  "_url\030\001 \002(\t\022\020\n\010cam_user\030\002 \002(\t\022\017\n\007cam_pwd\030"
  "\003 \002(\t\022\025\n\rcam_is_active\030\004 \002(\010\022\021\n\tcam_mode"
  "l\030\005 \002(\t\022\036\n\020cam_frame_period\030\006 \001(\005:\0041000\022"
  "\023\n\010cam_prio\030\007 \001(\005:\0011\022\017\n\007cam_roi\030\010 \003(\t\022\021\n"
  "\tcam_group\030\t \002(\t\022\020\n\010cam_name\030\n \002(\t\022\036\n\020ca"
  "m_frame_height\030\013 \001(\005:\0041080\022\035\n\017cam_frame_"
  "width\030\014 \001(\005:\0041920\"*\n\013CamerasList\022\033\n\003cam\030"
  "\001 \003(\0132\016.config.Camera\"n\n\024MotionDetectorP"
  "arams\022\032\n\022movdet_color_tresh\030\001 \002(\005\022\031\n\021mov"
  "det_diff_tresh\030\002 \002(\005\022\037\n\023movdet_timer_per"
  "iod\030\003 \001(\005:\00230\"j\n\005Event\022\021\n\tclass_num\030\001 \002("
  "\005\022\022\n\nclass_name\030\002 \002(\t\022\034\n\020class_main_time"
  "r\030\003 \001(\005:\00230\022\034\n\017class_sub_timer\030\004 \001(\005:\00312"
  "0\"2\n\022EventHandlerParams\022\034\n\005event\030\001 \003(\0132\r"
  ".config.Event\"3\n\010NNParams\022\023\n\013conf_thresh"
  "\030\001 \002(\002\022\022\n\nnms_thresh\030\002 \002(\002\"\313\001\n\006Config\022%\n"
  "\010cam_list\030\001 \002(\0132\023.config.CamerasList\022\021\n\t"
  "server_ip\030\002 \002(\t\0223\n\rmovdet_params\030\003 \002(\0132\034"
  ".config.MotionDetectorParams\022-\n\teh_param"
  "s\030\004 \002(\0132\032.config.EventHandlerParams\022#\n\tn"
  "n_params\030\005 \002(\0132\020.config.NNParams"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto = {
  false, false, 872, descriptor_table_protodef_config_2eproto, "config.proto", 
  &descriptor_table_config_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_config_2eproto::offsets,
  file_level_metadata_config_2eproto, file_level_enum_descriptors_config_2eproto, file_level_service_descriptors_config_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_config_2eproto_getter() {
  return &descriptor_table_config_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_config_2eproto(&descriptor_table_config_2eproto);
namespace config {

// ===================================================================

class Camera::_Internal {
 public:
  using HasBits = decltype(std::declval<Camera>()._has_bits_);
  static void set_has_cam_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cam_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cam_pwd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cam_is_active(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cam_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cam_frame_period(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cam_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cam_group(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cam_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cam_frame_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cam_frame_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

Camera::Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cam_roi_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:config.Camera)
}
Camera::Camera(const Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cam_roi_(from.cam_roi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cam_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cam_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cam_url()) {
    cam_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cam_url(), 
      GetArenaForAllocation());
  }
  cam_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cam_user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cam_user()) {
    cam_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cam_user(), 
      GetArenaForAllocation());
  }
  cam_pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cam_pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cam_pwd()) {
    cam_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cam_pwd(), 
      GetArenaForAllocation());
  }
  cam_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cam_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cam_model()) {
    cam_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cam_model(), 
      GetArenaForAllocation());
  }
  cam_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cam_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cam_group()) {
    cam_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cam_group(), 
      GetArenaForAllocation());
  }
  cam_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cam_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cam_name()) {
    cam_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cam_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cam_is_active_, &from.cam_is_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&cam_frame_width_) -
    reinterpret_cast<char*>(&cam_is_active_)) + sizeof(cam_frame_width_));
  // @@protoc_insertion_point(copy_constructor:config.Camera)
}

inline void Camera::SharedCtor() {
cam_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cam_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cam_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cam_user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cam_pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cam_pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cam_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cam_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cam_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cam_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cam_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cam_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cam_is_active_ = false;
cam_frame_period_ = 1000;
cam_prio_ = 1;
cam_frame_height_ = 1080;
cam_frame_width_ = 1920;
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:config.Camera)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Camera::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cam_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cam_user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cam_pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cam_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cam_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cam_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Camera::ArenaDtor(void* object) {
  Camera* _this = reinterpret_cast< Camera* >(object);
  (void)_this;
}
void Camera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Camera)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cam_roi_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      cam_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cam_user_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      cam_pwd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      cam_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      cam_group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      cam_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    cam_is_active_ = false;
    cam_frame_period_ = 1000;
  }
  if (cached_has_bits & 0x00000700u) {
    cam_prio_ = 1;
    cam_frame_height_ = 1080;
    cam_frame_width_ = 1920;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string cam_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cam_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.Camera.cam_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string cam_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cam_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.Camera.cam_user");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string cam_pwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cam_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.Camera.cam_pwd");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool cam_is_active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cam_is_active(&has_bits);
          cam_is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string cam_model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cam_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.Camera.cam_model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cam_frame_period = 6 [default = 1000];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cam_frame_period(&has_bits);
          cam_frame_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cam_prio = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cam_prio(&has_bits);
          cam_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string cam_roi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cam_roi();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.Camera.cam_roi");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required string cam_group = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_cam_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.Camera.cam_group");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string cam_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_cam_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.Camera.cam_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cam_frame_height = 11 [default = 1080];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_cam_frame_height(&has_bits);
          cam_frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cam_frame_width = 12 [default = 1920];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_cam_frame_width(&has_bits);
          cam_frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Camera::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Camera)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string cam_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cam_url().data(), static_cast<int>(this->_internal_cam_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Camera.cam_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cam_url(), target);
  }

  // required string cam_user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cam_user().data(), static_cast<int>(this->_internal_cam_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Camera.cam_user");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cam_user(), target);
  }

  // required string cam_pwd = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cam_pwd().data(), static_cast<int>(this->_internal_cam_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Camera.cam_pwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cam_pwd(), target);
  }

  // required bool cam_is_active = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_cam_is_active(), target);
  }

  // required string cam_model = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cam_model().data(), static_cast<int>(this->_internal_cam_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Camera.cam_model");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cam_model(), target);
  }

  // optional int32 cam_frame_period = 6 [default = 1000];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cam_frame_period(), target);
  }

  // optional int32 cam_prio = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_cam_prio(), target);
  }

  // repeated string cam_roi = 8;
  for (int i = 0, n = this->_internal_cam_roi_size(); i < n; i++) {
    const auto& s = this->_internal_cam_roi(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Camera.cam_roi");
    target = stream->WriteString(8, s, target);
  }

  // required string cam_group = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cam_group().data(), static_cast<int>(this->_internal_cam_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Camera.cam_group");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_cam_group(), target);
  }

  // required string cam_name = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cam_name().data(), static_cast<int>(this->_internal_cam_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Camera.cam_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_cam_name(), target);
  }

  // optional int32 cam_frame_height = 11 [default = 1080];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_cam_frame_height(), target);
  }

  // optional int32 cam_frame_width = 12 [default = 1920];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_cam_frame_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Camera)
  return target;
}

size_t Camera::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.Camera)
  size_t total_size = 0;

  if (_internal_has_cam_url()) {
    // required string cam_url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_url());
  }

  if (_internal_has_cam_user()) {
    // required string cam_user = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_user());
  }

  if (_internal_has_cam_pwd()) {
    // required string cam_pwd = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_pwd());
  }

  if (_internal_has_cam_model()) {
    // required string cam_model = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_model());
  }

  if (_internal_has_cam_group()) {
    // required string cam_group = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_group());
  }

  if (_internal_has_cam_name()) {
    // required string cam_name = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_name());
  }

  if (_internal_has_cam_is_active()) {
    // required bool cam_is_active = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Camera)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string cam_url = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_url());

    // required string cam_user = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_user());

    // required string cam_pwd = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_pwd());

    // required string cam_model = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_model());

    // required string cam_group = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_group());

    // required string cam_name = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cam_name());

    // required bool cam_is_active = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cam_roi = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cam_roi_.size());
  for (int i = 0, n = cam_roi_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cam_roi_.Get(i));
  }

  // optional int32 cam_frame_period = 6 [default = 1000];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cam_frame_period());
  }

  if (cached_has_bits & 0x00000700u) {
    // optional int32 cam_prio = 7 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cam_prio());
    }

    // optional int32 cam_frame_height = 11 [default = 1080];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cam_frame_height());
    }

    // optional int32 cam_frame_width = 12 [default = 1920];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cam_frame_width());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Camera::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Camera::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Camera::GetClassData() const { return &_class_data_; }

void Camera::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Camera *>(to)->MergeFrom(
      static_cast<const Camera &>(from));
}


void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cam_roi_.MergeFrom(from.cam_roi_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cam_url(from._internal_cam_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cam_user(from._internal_cam_user());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cam_pwd(from._internal_cam_pwd());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_cam_model(from._internal_cam_model());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_cam_group(from._internal_cam_group());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_cam_name(from._internal_cam_name());
    }
    if (cached_has_bits & 0x00000040u) {
      cam_is_active_ = from.cam_is_active_;
    }
    if (cached_has_bits & 0x00000080u) {
      cam_frame_period_ = from.cam_frame_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      cam_prio_ = from.cam_prio_;
    }
    if (cached_has_bits & 0x00000200u) {
      cam_frame_height_ = from.cam_frame_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      cam_frame_width_ = from.cam_frame_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Camera::InternalSwap(Camera* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cam_roi_.InternalSwap(&other->cam_roi_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cam_url_, lhs_arena,
      &other->cam_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cam_user_, lhs_arena,
      &other->cam_user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cam_pwd_, lhs_arena,
      &other->cam_pwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cam_model_, lhs_arena,
      &other->cam_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cam_group_, lhs_arena,
      &other->cam_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cam_name_, lhs_arena,
      &other->cam_name_, rhs_arena
  );
  swap(cam_is_active_, other->cam_is_active_);
  swap(cam_frame_period_, other->cam_frame_period_);
  swap(cam_prio_, other->cam_prio_);
  swap(cam_frame_height_, other->cam_frame_height_);
  swap(cam_frame_width_, other->cam_frame_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[0]);
}

// ===================================================================

class CamerasList::_Internal {
 public:
};

CamerasList::CamerasList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cam_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:config.CamerasList)
}
CamerasList::CamerasList(const CamerasList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cam_(from.cam_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:config.CamerasList)
}

inline void CamerasList::SharedCtor() {
}

CamerasList::~CamerasList() {
  // @@protoc_insertion_point(destructor:config.CamerasList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CamerasList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CamerasList::ArenaDtor(void* object) {
  CamerasList* _this = reinterpret_cast< CamerasList* >(object);
  (void)_this;
}
void CamerasList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CamerasList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CamerasList::Clear() {
// @@protoc_insertion_point(message_clear_start:config.CamerasList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cam_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamerasList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .config.Camera cam = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cam(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamerasList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.CamerasList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .config.Camera cam = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cam_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cam(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.CamerasList)
  return target;
}

size_t CamerasList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.CamerasList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .config.Camera cam = 1;
  total_size += 1UL * this->_internal_cam_size();
  for (const auto& msg : this->cam_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamerasList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CamerasList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamerasList::GetClassData() const { return &_class_data_; }

void CamerasList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CamerasList *>(to)->MergeFrom(
      static_cast<const CamerasList &>(from));
}


void CamerasList::MergeFrom(const CamerasList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.CamerasList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cam_.MergeFrom(from.cam_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamerasList::CopyFrom(const CamerasList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.CamerasList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamerasList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cam_))
    return false;
  return true;
}

void CamerasList::InternalSwap(CamerasList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cam_.InternalSwap(&other->cam_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CamerasList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[1]);
}

// ===================================================================

class MotionDetectorParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionDetectorParams>()._has_bits_);
  static void set_has_movdet_color_tresh(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_movdet_diff_tresh(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_movdet_timer_period(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MotionDetectorParams::MotionDetectorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:config.MotionDetectorParams)
}
MotionDetectorParams::MotionDetectorParams(const MotionDetectorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&movdet_color_tresh_, &from.movdet_color_tresh_,
    static_cast<size_t>(reinterpret_cast<char*>(&movdet_timer_period_) -
    reinterpret_cast<char*>(&movdet_color_tresh_)) + sizeof(movdet_timer_period_));
  // @@protoc_insertion_point(copy_constructor:config.MotionDetectorParams)
}

inline void MotionDetectorParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&movdet_color_tresh_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&movdet_diff_tresh_) -
    reinterpret_cast<char*>(&movdet_color_tresh_)) + sizeof(movdet_diff_tresh_));
movdet_timer_period_ = 30;
}

MotionDetectorParams::~MotionDetectorParams() {
  // @@protoc_insertion_point(destructor:config.MotionDetectorParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotionDetectorParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MotionDetectorParams::ArenaDtor(void* object) {
  MotionDetectorParams* _this = reinterpret_cast< MotionDetectorParams* >(object);
  (void)_this;
}
void MotionDetectorParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionDetectorParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionDetectorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:config.MotionDetectorParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&movdet_color_tresh_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&movdet_diff_tresh_) -
        reinterpret_cast<char*>(&movdet_color_tresh_)) + sizeof(movdet_diff_tresh_));
    movdet_timer_period_ = 30;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionDetectorParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 movdet_color_tresh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_movdet_color_tresh(&has_bits);
          movdet_color_tresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 movdet_diff_tresh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_movdet_diff_tresh(&has_bits);
          movdet_diff_tresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 movdet_timer_period = 3 [default = 30];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_movdet_timer_period(&has_bits);
          movdet_timer_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotionDetectorParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.MotionDetectorParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 movdet_color_tresh = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_movdet_color_tresh(), target);
  }

  // required int32 movdet_diff_tresh = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_movdet_diff_tresh(), target);
  }

  // optional int32 movdet_timer_period = 3 [default = 30];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_movdet_timer_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.MotionDetectorParams)
  return target;
}

size_t MotionDetectorParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.MotionDetectorParams)
  size_t total_size = 0;

  if (_internal_has_movdet_color_tresh()) {
    // required int32 movdet_color_tresh = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_movdet_color_tresh());
  }

  if (_internal_has_movdet_diff_tresh()) {
    // required int32 movdet_diff_tresh = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_movdet_diff_tresh());
  }

  return total_size;
}
size_t MotionDetectorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.MotionDetectorParams)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 movdet_color_tresh = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_movdet_color_tresh());

    // required int32 movdet_diff_tresh = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_movdet_diff_tresh());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 movdet_timer_period = 3 [default = 30];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_movdet_timer_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionDetectorParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotionDetectorParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionDetectorParams::GetClassData() const { return &_class_data_; }

void MotionDetectorParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MotionDetectorParams *>(to)->MergeFrom(
      static_cast<const MotionDetectorParams &>(from));
}


void MotionDetectorParams::MergeFrom(const MotionDetectorParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.MotionDetectorParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      movdet_color_tresh_ = from.movdet_color_tresh_;
    }
    if (cached_has_bits & 0x00000002u) {
      movdet_diff_tresh_ = from.movdet_diff_tresh_;
    }
    if (cached_has_bits & 0x00000004u) {
      movdet_timer_period_ = from.movdet_timer_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionDetectorParams::CopyFrom(const MotionDetectorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.MotionDetectorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionDetectorParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MotionDetectorParams::InternalSwap(MotionDetectorParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionDetectorParams, movdet_diff_tresh_)
      + sizeof(MotionDetectorParams::movdet_diff_tresh_)
      - PROTOBUF_FIELD_OFFSET(MotionDetectorParams, movdet_color_tresh_)>(
          reinterpret_cast<char*>(&movdet_color_tresh_),
          reinterpret_cast<char*>(&other->movdet_color_tresh_));
  swap(movdet_timer_period_, other->movdet_timer_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionDetectorParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[2]);
}

// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._has_bits_);
  static void set_has_class_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_class_main_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_class_sub_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:config.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_class_name()) {
    class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&class_num_, &from.class_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&class_sub_timer_) -
    reinterpret_cast<char*>(&class_num_)) + sizeof(class_sub_timer_));
  // @@protoc_insertion_point(copy_constructor:config.Event)
}

inline void Event::SharedCtor() {
class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
class_num_ = 0;
class_main_timer_ = 30;
class_sub_timer_ = 120;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:config.Event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    class_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    class_num_ = 0;
    class_main_timer_ = 30;
    class_sub_timer_ = 120;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 class_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_class_num(&has_bits);
          class_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string class_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.Event.class_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 class_main_timer = 3 [default = 30];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_class_main_timer(&has_bits);
          class_main_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 class_sub_timer = 4 [default = 120];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_class_sub_timer(&has_bits);
          class_sub_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 class_num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_class_num(), target);
  }

  // required string class_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Event.class_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_class_name(), target);
  }

  // optional int32 class_main_timer = 3 [default = 30];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_class_main_timer(), target);
  }

  // optional int32 class_sub_timer = 4 [default = 120];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_class_sub_timer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Event)
  return target;
}

size_t Event::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.Event)
  size_t total_size = 0;

  if (_internal_has_class_name()) {
    // required string class_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  if (_internal_has_class_num()) {
    // required int32 class_num = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_class_num());
  }

  return total_size;
}
size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Event)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string class_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());

    // required int32 class_num = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_class_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional int32 class_main_timer = 3 [default = 30];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_class_main_timer());
    }

    // optional int32 class_sub_timer = 4 [default = 120];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_class_sub_timer());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }

void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Event *>(to)->MergeFrom(
      static_cast<const Event &>(from));
}


void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.Event)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_class_name(from._internal_class_name());
    }
    if (cached_has_bits & 0x00000002u) {
      class_num_ = from.class_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      class_main_timer_ = from.class_main_timer_;
    }
    if (cached_has_bits & 0x00000008u) {
      class_sub_timer_ = from.class_sub_timer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  swap(class_num_, other->class_num_);
  swap(class_main_timer_, other->class_main_timer_);
  swap(class_sub_timer_, other->class_sub_timer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[3]);
}

// ===================================================================

class EventHandlerParams::_Internal {
 public:
};

EventHandlerParams::EventHandlerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  event_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:config.EventHandlerParams)
}
EventHandlerParams::EventHandlerParams(const EventHandlerParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      event_(from.event_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:config.EventHandlerParams)
}

inline void EventHandlerParams::SharedCtor() {
}

EventHandlerParams::~EventHandlerParams() {
  // @@protoc_insertion_point(destructor:config.EventHandlerParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventHandlerParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventHandlerParams::ArenaDtor(void* object) {
  EventHandlerParams* _this = reinterpret_cast< EventHandlerParams* >(object);
  (void)_this;
}
void EventHandlerParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventHandlerParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventHandlerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:config.EventHandlerParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventHandlerParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .config.Event event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventHandlerParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.EventHandlerParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .config.Event event = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_event(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.EventHandlerParams)
  return target;
}

size_t EventHandlerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.EventHandlerParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .config.Event event = 1;
  total_size += 1UL * this->_internal_event_size();
  for (const auto& msg : this->event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventHandlerParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventHandlerParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventHandlerParams::GetClassData() const { return &_class_data_; }

void EventHandlerParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventHandlerParams *>(to)->MergeFrom(
      static_cast<const EventHandlerParams &>(from));
}


void EventHandlerParams::MergeFrom(const EventHandlerParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.EventHandlerParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  event_.MergeFrom(from.event_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventHandlerParams::CopyFrom(const EventHandlerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.EventHandlerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventHandlerParams::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(event_))
    return false;
  return true;
}

void EventHandlerParams::InternalSwap(EventHandlerParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  event_.InternalSwap(&other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventHandlerParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[4]);
}

// ===================================================================

class NNParams::_Internal {
 public:
  using HasBits = decltype(std::declval<NNParams>()._has_bits_);
  static void set_has_conf_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nms_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

NNParams::NNParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:config.NNParams)
}
NNParams::NNParams(const NNParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&conf_thresh_, &from.conf_thresh_,
    static_cast<size_t>(reinterpret_cast<char*>(&nms_thresh_) -
    reinterpret_cast<char*>(&conf_thresh_)) + sizeof(nms_thresh_));
  // @@protoc_insertion_point(copy_constructor:config.NNParams)
}

inline void NNParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&conf_thresh_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nms_thresh_) -
    reinterpret_cast<char*>(&conf_thresh_)) + sizeof(nms_thresh_));
}

NNParams::~NNParams() {
  // @@protoc_insertion_point(destructor:config.NNParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NNParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NNParams::ArenaDtor(void* object) {
  NNParams* _this = reinterpret_cast< NNParams* >(object);
  (void)_this;
}
void NNParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NNParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NNParams::Clear() {
// @@protoc_insertion_point(message_clear_start:config.NNParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&conf_thresh_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nms_thresh_) -
        reinterpret_cast<char*>(&conf_thresh_)) + sizeof(nms_thresh_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NNParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float conf_thresh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_conf_thresh(&has_bits);
          conf_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float nms_thresh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_nms_thresh(&has_bits);
          nms_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NNParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.NNParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float conf_thresh = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_conf_thresh(), target);
  }

  // required float nms_thresh = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_nms_thresh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.NNParams)
  return target;
}

size_t NNParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.NNParams)
  size_t total_size = 0;

  if (_internal_has_conf_thresh()) {
    // required float conf_thresh = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_nms_thresh()) {
    // required float nms_thresh = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t NNParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.NNParams)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float conf_thresh = 1;
    total_size += 1 + 4;

    // required float nms_thresh = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NNParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NNParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NNParams::GetClassData() const { return &_class_data_; }

void NNParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NNParams *>(to)->MergeFrom(
      static_cast<const NNParams &>(from));
}


void NNParams::MergeFrom(const NNParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.NNParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      conf_thresh_ = from.conf_thresh_;
    }
    if (cached_has_bits & 0x00000002u) {
      nms_thresh_ = from.nms_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NNParams::CopyFrom(const NNParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.NNParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NNParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NNParams::InternalSwap(NNParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NNParams, nms_thresh_)
      + sizeof(NNParams::nms_thresh_)
      - PROTOBUF_FIELD_OFFSET(NNParams, conf_thresh_)>(
          reinterpret_cast<char*>(&conf_thresh_),
          reinterpret_cast<char*>(&other->conf_thresh_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NNParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[5]);
}

// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static const ::config::CamerasList& cam_list(const Config* msg);
  static void set_has_cam_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::config::MotionDetectorParams& movdet_params(const Config* msg);
  static void set_has_movdet_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::config::EventHandlerParams& eh_params(const Config* msg);
  static void set_has_eh_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::config::NNParams& nn_params(const Config* msg);
  static void set_has_nn_params(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::config::CamerasList&
Config::_Internal::cam_list(const Config* msg) {
  return *msg->cam_list_;
}
const ::config::MotionDetectorParams&
Config::_Internal::movdet_params(const Config* msg) {
  return *msg->movdet_params_;
}
const ::config::EventHandlerParams&
Config::_Internal::eh_params(const Config* msg) {
  return *msg->eh_params_;
}
const ::config::NNParams&
Config::_Internal::nn_params(const Config* msg) {
  return *msg->nn_params_;
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:config.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_ip()) {
    server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_ip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cam_list()) {
    cam_list_ = new ::config::CamerasList(*from.cam_list_);
  } else {
    cam_list_ = nullptr;
  }
  if (from._internal_has_movdet_params()) {
    movdet_params_ = new ::config::MotionDetectorParams(*from.movdet_params_);
  } else {
    movdet_params_ = nullptr;
  }
  if (from._internal_has_eh_params()) {
    eh_params_ = new ::config::EventHandlerParams(*from.eh_params_);
  } else {
    eh_params_ = nullptr;
  }
  if (from._internal_has_nn_params()) {
    nn_params_ = new ::config::NNParams(*from.nn_params_);
  } else {
    nn_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:config.Config)
}

inline void Config::SharedCtor() {
server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cam_list_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nn_params_) -
    reinterpret_cast<char*>(&cam_list_)) + sizeof(nn_params_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:config.Config)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cam_list_;
  if (this != internal_default_instance()) delete movdet_params_;
  if (this != internal_default_instance()) delete eh_params_;
  if (this != internal_default_instance()) delete nn_params_;
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      server_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cam_list_ != nullptr);
      cam_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(movdet_params_ != nullptr);
      movdet_params_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(eh_params_ != nullptr);
      eh_params_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(nn_params_ != nullptr);
      nn_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .config.CamerasList cam_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cam_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string server_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "config.Config.server_ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .config.MotionDetectorParams movdet_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_movdet_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .config.EventHandlerParams eh_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_eh_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .config.NNParams nn_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nn_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .config.CamerasList cam_list = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cam_list(this), target, stream);
  }

  // required string server_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_ip().data(), static_cast<int>(this->_internal_server_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Config.server_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_ip(), target);
  }

  // required .config.MotionDetectorParams movdet_params = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::movdet_params(this), target, stream);
  }

  // required .config.EventHandlerParams eh_params = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::eh_params(this), target, stream);
  }

  // required .config.NNParams nn_params = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::nn_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Config)
  return target;
}

size_t Config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.Config)
  size_t total_size = 0;

  if (_internal_has_server_ip()) {
    // required string server_ip = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_ip());
  }

  if (_internal_has_cam_list()) {
    // required .config.CamerasList cam_list = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam_list_);
  }

  if (_internal_has_movdet_params()) {
    // required .config.MotionDetectorParams movdet_params = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movdet_params_);
  }

  if (_internal_has_eh_params()) {
    // required .config.EventHandlerParams eh_params = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eh_params_);
  }

  if (_internal_has_nn_params()) {
    // required .config.NNParams nn_params = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nn_params_);
  }

  return total_size;
}
size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Config)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string server_ip = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_ip());

    // required .config.CamerasList cam_list = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam_list_);

    // required .config.MotionDetectorParams movdet_params = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movdet_params_);

    // required .config.EventHandlerParams eh_params = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eh_params_);

    // required .config.NNParams nn_params = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nn_params_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }

void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Config *>(to)->MergeFrom(
      static_cast<const Config &>(from));
}


void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_server_ip(from._internal_server_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cam_list()->::config::CamerasList::MergeFrom(from._internal_cam_list());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_movdet_params()->::config::MotionDetectorParams::MergeFrom(from._internal_movdet_params());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_eh_params()->::config::EventHandlerParams::MergeFrom(from._internal_eh_params());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_nn_params()->::config::NNParams::MergeFrom(from._internal_nn_params());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cam_list()) {
    if (!cam_list_->IsInitialized()) return false;
  }
  if (_internal_has_movdet_params()) {
    if (!movdet_params_->IsInitialized()) return false;
  }
  if (_internal_has_eh_params()) {
    if (!eh_params_->IsInitialized()) return false;
  }
  if (_internal_has_nn_params()) {
    if (!nn_params_->IsInitialized()) return false;
  }
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_ip_, lhs_arena,
      &other->server_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, nn_params_)
      + sizeof(Config::nn_params_)
      - PROTOBUF_FIELD_OFFSET(Config, cam_list_)>(
          reinterpret_cast<char*>(&cam_list_),
          reinterpret_cast<char*>(&other->cam_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::config::Camera* Arena::CreateMaybeMessage< ::config::Camera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Camera >(arena);
}
template<> PROTOBUF_NOINLINE ::config::CamerasList* Arena::CreateMaybeMessage< ::config::CamerasList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::CamerasList >(arena);
}
template<> PROTOBUF_NOINLINE ::config::MotionDetectorParams* Arena::CreateMaybeMessage< ::config::MotionDetectorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::MotionDetectorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::config::Event* Arena::CreateMaybeMessage< ::config::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::config::EventHandlerParams* Arena::CreateMaybeMessage< ::config::EventHandlerParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::EventHandlerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::config::NNParams* Arena::CreateMaybeMessage< ::config::NNParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::NNParams >(arena);
}
template<> PROTOBUF_NOINLINE ::config::Config* Arena::CreateMaybeMessage< ::config::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
