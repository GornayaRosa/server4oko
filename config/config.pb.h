// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
namespace config {
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class CamerasList;
struct CamerasListDefaultTypeInternal;
extern CamerasListDefaultTypeInternal _CamerasList_default_instance_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventHandlerParams;
struct EventHandlerParamsDefaultTypeInternal;
extern EventHandlerParamsDefaultTypeInternal _EventHandlerParams_default_instance_;
class MotionDetectorParams;
struct MotionDetectorParamsDefaultTypeInternal;
extern MotionDetectorParamsDefaultTypeInternal _MotionDetectorParams_default_instance_;
class NNParams;
struct NNParamsDefaultTypeInternal;
extern NNParamsDefaultTypeInternal _NNParams_default_instance_;
}  // namespace config
PROTOBUF_NAMESPACE_OPEN
template<> ::config::Camera* Arena::CreateMaybeMessage<::config::Camera>(Arena*);
template<> ::config::CamerasList* Arena::CreateMaybeMessage<::config::CamerasList>(Arena*);
template<> ::config::Config* Arena::CreateMaybeMessage<::config::Config>(Arena*);
template<> ::config::Event* Arena::CreateMaybeMessage<::config::Event>(Arena*);
template<> ::config::EventHandlerParams* Arena::CreateMaybeMessage<::config::EventHandlerParams>(Arena*);
template<> ::config::MotionDetectorParams* Arena::CreateMaybeMessage<::config::MotionDetectorParams>(Arena*);
template<> ::config::NNParams* Arena::CreateMaybeMessage<::config::NNParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace config {

// ===================================================================

class Camera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  ~Camera() override;
  explicit constexpr Camera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Camera(const Camera& from);
  Camera(Camera&& from) noexcept
    : Camera() {
    *this = ::std::move(from);
  }

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
               &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Camera& a, Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(Camera* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Camera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Camera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Camera& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Camera* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.Camera";
  }
  protected:
  explicit Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamRoiFieldNumber = 8,
    kCamUrlFieldNumber = 1,
    kCamUserFieldNumber = 2,
    kCamPwdFieldNumber = 3,
    kCamModelFieldNumber = 5,
    kCamGroupFieldNumber = 9,
    kCamNameFieldNumber = 10,
    kCamIsActiveFieldNumber = 4,
    kCamFramePeriodFieldNumber = 6,
    kCamPrioFieldNumber = 7,
    kCamFrameHeightFieldNumber = 11,
    kCamFrameWidthFieldNumber = 12,
  };
  // repeated string cam_roi = 8;
  int cam_roi_size() const;
  private:
  int _internal_cam_roi_size() const;
  public:
  void clear_cam_roi();
  const std::string& cam_roi(int index) const;
  std::string* mutable_cam_roi(int index);
  void set_cam_roi(int index, const std::string& value);
  void set_cam_roi(int index, std::string&& value);
  void set_cam_roi(int index, const char* value);
  void set_cam_roi(int index, const char* value, size_t size);
  std::string* add_cam_roi();
  void add_cam_roi(const std::string& value);
  void add_cam_roi(std::string&& value);
  void add_cam_roi(const char* value);
  void add_cam_roi(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cam_roi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cam_roi();
  private:
  const std::string& _internal_cam_roi(int index) const;
  std::string* _internal_add_cam_roi();
  public:

  // required string cam_url = 1;
  bool has_cam_url() const;
  private:
  bool _internal_has_cam_url() const;
  public:
  void clear_cam_url();
  const std::string& cam_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cam_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cam_url();
  PROTOBUF_NODISCARD std::string* release_cam_url();
  void set_allocated_cam_url(std::string* cam_url);
  private:
  const std::string& _internal_cam_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cam_url(const std::string& value);
  std::string* _internal_mutable_cam_url();
  public:

  // required string cam_user = 2;
  bool has_cam_user() const;
  private:
  bool _internal_has_cam_user() const;
  public:
  void clear_cam_user();
  const std::string& cam_user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cam_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cam_user();
  PROTOBUF_NODISCARD std::string* release_cam_user();
  void set_allocated_cam_user(std::string* cam_user);
  private:
  const std::string& _internal_cam_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cam_user(const std::string& value);
  std::string* _internal_mutable_cam_user();
  public:

  // required string cam_pwd = 3;
  bool has_cam_pwd() const;
  private:
  bool _internal_has_cam_pwd() const;
  public:
  void clear_cam_pwd();
  const std::string& cam_pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cam_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cam_pwd();
  PROTOBUF_NODISCARD std::string* release_cam_pwd();
  void set_allocated_cam_pwd(std::string* cam_pwd);
  private:
  const std::string& _internal_cam_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cam_pwd(const std::string& value);
  std::string* _internal_mutable_cam_pwd();
  public:

  // required string cam_model = 5;
  bool has_cam_model() const;
  private:
  bool _internal_has_cam_model() const;
  public:
  void clear_cam_model();
  const std::string& cam_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cam_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cam_model();
  PROTOBUF_NODISCARD std::string* release_cam_model();
  void set_allocated_cam_model(std::string* cam_model);
  private:
  const std::string& _internal_cam_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cam_model(const std::string& value);
  std::string* _internal_mutable_cam_model();
  public:

  // required string cam_group = 9;
  bool has_cam_group() const;
  private:
  bool _internal_has_cam_group() const;
  public:
  void clear_cam_group();
  const std::string& cam_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cam_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cam_group();
  PROTOBUF_NODISCARD std::string* release_cam_group();
  void set_allocated_cam_group(std::string* cam_group);
  private:
  const std::string& _internal_cam_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cam_group(const std::string& value);
  std::string* _internal_mutable_cam_group();
  public:

  // required string cam_name = 10;
  bool has_cam_name() const;
  private:
  bool _internal_has_cam_name() const;
  public:
  void clear_cam_name();
  const std::string& cam_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cam_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cam_name();
  PROTOBUF_NODISCARD std::string* release_cam_name();
  void set_allocated_cam_name(std::string* cam_name);
  private:
  const std::string& _internal_cam_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cam_name(const std::string& value);
  std::string* _internal_mutable_cam_name();
  public:

  // required bool cam_is_active = 4;
  bool has_cam_is_active() const;
  private:
  bool _internal_has_cam_is_active() const;
  public:
  void clear_cam_is_active();
  bool cam_is_active() const;
  void set_cam_is_active(bool value);
  private:
  bool _internal_cam_is_active() const;
  void _internal_set_cam_is_active(bool value);
  public:

  // optional int32 cam_frame_period = 6 [default = 1000];
  bool has_cam_frame_period() const;
  private:
  bool _internal_has_cam_frame_period() const;
  public:
  void clear_cam_frame_period();
  int32_t cam_frame_period() const;
  void set_cam_frame_period(int32_t value);
  private:
  int32_t _internal_cam_frame_period() const;
  void _internal_set_cam_frame_period(int32_t value);
  public:

  // optional int32 cam_prio = 7 [default = 1];
  bool has_cam_prio() const;
  private:
  bool _internal_has_cam_prio() const;
  public:
  void clear_cam_prio();
  int32_t cam_prio() const;
  void set_cam_prio(int32_t value);
  private:
  int32_t _internal_cam_prio() const;
  void _internal_set_cam_prio(int32_t value);
  public:

  // optional int32 cam_frame_height = 11 [default = 1080];
  bool has_cam_frame_height() const;
  private:
  bool _internal_has_cam_frame_height() const;
  public:
  void clear_cam_frame_height();
  int32_t cam_frame_height() const;
  void set_cam_frame_height(int32_t value);
  private:
  int32_t _internal_cam_frame_height() const;
  void _internal_set_cam_frame_height(int32_t value);
  public:

  // optional int32 cam_frame_width = 12 [default = 1920];
  bool has_cam_frame_width() const;
  private:
  bool _internal_has_cam_frame_width() const;
  public:
  void clear_cam_frame_width();
  int32_t cam_frame_width() const;
  void set_cam_frame_width(int32_t value);
  private:
  int32_t _internal_cam_frame_width() const;
  void _internal_set_cam_frame_width(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:config.Camera)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cam_roi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cam_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cam_user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cam_pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cam_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cam_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cam_name_;
  bool cam_is_active_;
  int32_t cam_frame_period_;
  int32_t cam_prio_;
  int32_t cam_frame_height_;
  int32_t cam_frame_width_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class CamerasList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.CamerasList) */ {
 public:
  inline CamerasList() : CamerasList(nullptr) {}
  ~CamerasList() override;
  explicit constexpr CamerasList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamerasList(const CamerasList& from);
  CamerasList(CamerasList&& from) noexcept
    : CamerasList() {
    *this = ::std::move(from);
  }

  inline CamerasList& operator=(const CamerasList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamerasList& operator=(CamerasList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamerasList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamerasList* internal_default_instance() {
    return reinterpret_cast<const CamerasList*>(
               &_CamerasList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CamerasList& a, CamerasList& b) {
    a.Swap(&b);
  }
  inline void Swap(CamerasList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamerasList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamerasList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamerasList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamerasList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CamerasList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamerasList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.CamerasList";
  }
  protected:
  explicit CamerasList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamFieldNumber = 1,
  };
  // repeated .config.Camera cam = 1;
  int cam_size() const;
  private:
  int _internal_cam_size() const;
  public:
  void clear_cam();
  ::config::Camera* mutable_cam(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::Camera >*
      mutable_cam();
  private:
  const ::config::Camera& _internal_cam(int index) const;
  ::config::Camera* _internal_add_cam();
  public:
  const ::config::Camera& cam(int index) const;
  ::config::Camera* add_cam();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::Camera >&
      cam() const;

  // @@protoc_insertion_point(class_scope:config.CamerasList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::Camera > cam_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class MotionDetectorParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.MotionDetectorParams) */ {
 public:
  inline MotionDetectorParams() : MotionDetectorParams(nullptr) {}
  ~MotionDetectorParams() override;
  explicit constexpr MotionDetectorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionDetectorParams(const MotionDetectorParams& from);
  MotionDetectorParams(MotionDetectorParams&& from) noexcept
    : MotionDetectorParams() {
    *this = ::std::move(from);
  }

  inline MotionDetectorParams& operator=(const MotionDetectorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionDetectorParams& operator=(MotionDetectorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionDetectorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionDetectorParams* internal_default_instance() {
    return reinterpret_cast<const MotionDetectorParams*>(
               &_MotionDetectorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MotionDetectorParams& a, MotionDetectorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionDetectorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionDetectorParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionDetectorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionDetectorParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionDetectorParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotionDetectorParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionDetectorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.MotionDetectorParams";
  }
  protected:
  explicit MotionDetectorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovdetColorTreshFieldNumber = 1,
    kMovdetDiffTreshFieldNumber = 2,
    kMovdetTimerPeriodFieldNumber = 3,
  };
  // required int32 movdet_color_tresh = 1;
  bool has_movdet_color_tresh() const;
  private:
  bool _internal_has_movdet_color_tresh() const;
  public:
  void clear_movdet_color_tresh();
  int32_t movdet_color_tresh() const;
  void set_movdet_color_tresh(int32_t value);
  private:
  int32_t _internal_movdet_color_tresh() const;
  void _internal_set_movdet_color_tresh(int32_t value);
  public:

  // required int32 movdet_diff_tresh = 2;
  bool has_movdet_diff_tresh() const;
  private:
  bool _internal_has_movdet_diff_tresh() const;
  public:
  void clear_movdet_diff_tresh();
  int32_t movdet_diff_tresh() const;
  void set_movdet_diff_tresh(int32_t value);
  private:
  int32_t _internal_movdet_diff_tresh() const;
  void _internal_set_movdet_diff_tresh(int32_t value);
  public:

  // optional int32 movdet_timer_period = 3 [default = 30];
  bool has_movdet_timer_period() const;
  private:
  bool _internal_has_movdet_timer_period() const;
  public:
  void clear_movdet_timer_period();
  int32_t movdet_timer_period() const;
  void set_movdet_timer_period(int32_t value);
  private:
  int32_t _internal_movdet_timer_period() const;
  void _internal_set_movdet_timer_period(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:config.MotionDetectorParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t movdet_color_tresh_;
  int32_t movdet_diff_tresh_;
  int32_t movdet_timer_period_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit constexpr Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNameFieldNumber = 2,
    kClassNumFieldNumber = 1,
    kClassMainTimerFieldNumber = 3,
    kClassSubTimerFieldNumber = 4,
  };
  // required string class_name = 2;
  bool has_class_name() const;
  private:
  bool _internal_has_class_name() const;
  public:
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // required int32 class_num = 1;
  bool has_class_num() const;
  private:
  bool _internal_has_class_num() const;
  public:
  void clear_class_num();
  int32_t class_num() const;
  void set_class_num(int32_t value);
  private:
  int32_t _internal_class_num() const;
  void _internal_set_class_num(int32_t value);
  public:

  // optional int32 class_main_timer = 3 [default = 30];
  bool has_class_main_timer() const;
  private:
  bool _internal_has_class_main_timer() const;
  public:
  void clear_class_main_timer();
  int32_t class_main_timer() const;
  void set_class_main_timer(int32_t value);
  private:
  int32_t _internal_class_main_timer() const;
  void _internal_set_class_main_timer(int32_t value);
  public:

  // optional int32 class_sub_timer = 4 [default = 120];
  bool has_class_sub_timer() const;
  private:
  bool _internal_has_class_sub_timer() const;
  public:
  void clear_class_sub_timer();
  int32_t class_sub_timer() const;
  void set_class_sub_timer(int32_t value);
  private:
  int32_t _internal_class_sub_timer() const;
  void _internal_set_class_sub_timer(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:config.Event)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  int32_t class_num_;
  int32_t class_main_timer_;
  int32_t class_sub_timer_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class EventHandlerParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.EventHandlerParams) */ {
 public:
  inline EventHandlerParams() : EventHandlerParams(nullptr) {}
  ~EventHandlerParams() override;
  explicit constexpr EventHandlerParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventHandlerParams(const EventHandlerParams& from);
  EventHandlerParams(EventHandlerParams&& from) noexcept
    : EventHandlerParams() {
    *this = ::std::move(from);
  }

  inline EventHandlerParams& operator=(const EventHandlerParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventHandlerParams& operator=(EventHandlerParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventHandlerParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventHandlerParams* internal_default_instance() {
    return reinterpret_cast<const EventHandlerParams*>(
               &_EventHandlerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventHandlerParams& a, EventHandlerParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EventHandlerParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventHandlerParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventHandlerParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventHandlerParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventHandlerParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventHandlerParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventHandlerParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.EventHandlerParams";
  }
  protected:
  explicit EventHandlerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // repeated .config.Event event = 1;
  int event_size() const;
  private:
  int _internal_event_size() const;
  public:
  void clear_event();
  ::config::Event* mutable_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::Event >*
      mutable_event();
  private:
  const ::config::Event& _internal_event(int index) const;
  ::config::Event* _internal_add_event();
  public:
  const ::config::Event& event(int index) const;
  ::config::Event* add_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::Event >&
      event() const;

  // @@protoc_insertion_point(class_scope:config.EventHandlerParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::Event > event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class NNParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.NNParams) */ {
 public:
  inline NNParams() : NNParams(nullptr) {}
  ~NNParams() override;
  explicit constexpr NNParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NNParams(const NNParams& from);
  NNParams(NNParams&& from) noexcept
    : NNParams() {
    *this = ::std::move(from);
  }

  inline NNParams& operator=(const NNParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline NNParams& operator=(NNParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NNParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const NNParams* internal_default_instance() {
    return reinterpret_cast<const NNParams*>(
               &_NNParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NNParams& a, NNParams& b) {
    a.Swap(&b);
  }
  inline void Swap(NNParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NNParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NNParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NNParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NNParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NNParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NNParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.NNParams";
  }
  protected:
  explicit NNParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfThreshFieldNumber = 1,
    kNmsThreshFieldNumber = 2,
  };
  // required float conf_thresh = 1;
  bool has_conf_thresh() const;
  private:
  bool _internal_has_conf_thresh() const;
  public:
  void clear_conf_thresh();
  float conf_thresh() const;
  void set_conf_thresh(float value);
  private:
  float _internal_conf_thresh() const;
  void _internal_set_conf_thresh(float value);
  public:

  // required float nms_thresh = 2;
  bool has_nms_thresh() const;
  private:
  bool _internal_has_nms_thresh() const;
  public:
  void clear_nms_thresh();
  float nms_thresh() const;
  void set_nms_thresh(float value);
  private:
  float _internal_nms_thresh() const;
  void _internal_set_nms_thresh(float value);
  public:

  // @@protoc_insertion_point(class_scope:config.NNParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float conf_thresh_;
  float nms_thresh_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit constexpr Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIpFieldNumber = 2,
    kCamListFieldNumber = 1,
    kMovdetParamsFieldNumber = 3,
    kEhParamsFieldNumber = 4,
    kNnParamsFieldNumber = 5,
  };
  // required string server_ip = 2;
  bool has_server_ip() const;
  private:
  bool _internal_has_server_ip() const;
  public:
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_NODISCARD std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // required .config.CamerasList cam_list = 1;
  bool has_cam_list() const;
  private:
  bool _internal_has_cam_list() const;
  public:
  void clear_cam_list();
  const ::config::CamerasList& cam_list() const;
  PROTOBUF_NODISCARD ::config::CamerasList* release_cam_list();
  ::config::CamerasList* mutable_cam_list();
  void set_allocated_cam_list(::config::CamerasList* cam_list);
  private:
  const ::config::CamerasList& _internal_cam_list() const;
  ::config::CamerasList* _internal_mutable_cam_list();
  public:
  void unsafe_arena_set_allocated_cam_list(
      ::config::CamerasList* cam_list);
  ::config::CamerasList* unsafe_arena_release_cam_list();

  // required .config.MotionDetectorParams movdet_params = 3;
  bool has_movdet_params() const;
  private:
  bool _internal_has_movdet_params() const;
  public:
  void clear_movdet_params();
  const ::config::MotionDetectorParams& movdet_params() const;
  PROTOBUF_NODISCARD ::config::MotionDetectorParams* release_movdet_params();
  ::config::MotionDetectorParams* mutable_movdet_params();
  void set_allocated_movdet_params(::config::MotionDetectorParams* movdet_params);
  private:
  const ::config::MotionDetectorParams& _internal_movdet_params() const;
  ::config::MotionDetectorParams* _internal_mutable_movdet_params();
  public:
  void unsafe_arena_set_allocated_movdet_params(
      ::config::MotionDetectorParams* movdet_params);
  ::config::MotionDetectorParams* unsafe_arena_release_movdet_params();

  // required .config.EventHandlerParams eh_params = 4;
  bool has_eh_params() const;
  private:
  bool _internal_has_eh_params() const;
  public:
  void clear_eh_params();
  const ::config::EventHandlerParams& eh_params() const;
  PROTOBUF_NODISCARD ::config::EventHandlerParams* release_eh_params();
  ::config::EventHandlerParams* mutable_eh_params();
  void set_allocated_eh_params(::config::EventHandlerParams* eh_params);
  private:
  const ::config::EventHandlerParams& _internal_eh_params() const;
  ::config::EventHandlerParams* _internal_mutable_eh_params();
  public:
  void unsafe_arena_set_allocated_eh_params(
      ::config::EventHandlerParams* eh_params);
  ::config::EventHandlerParams* unsafe_arena_release_eh_params();

  // required .config.NNParams nn_params = 5;
  bool has_nn_params() const;
  private:
  bool _internal_has_nn_params() const;
  public:
  void clear_nn_params();
  const ::config::NNParams& nn_params() const;
  PROTOBUF_NODISCARD ::config::NNParams* release_nn_params();
  ::config::NNParams* mutable_nn_params();
  void set_allocated_nn_params(::config::NNParams* nn_params);
  private:
  const ::config::NNParams& _internal_nn_params() const;
  ::config::NNParams* _internal_mutable_nn_params();
  public:
  void unsafe_arena_set_allocated_nn_params(
      ::config::NNParams* nn_params);
  ::config::NNParams* unsafe_arena_release_nn_params();

  // @@protoc_insertion_point(class_scope:config.Config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
  ::config::CamerasList* cam_list_;
  ::config::MotionDetectorParams* movdet_params_;
  ::config::EventHandlerParams* eh_params_;
  ::config::NNParams* nn_params_;
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Camera

// required string cam_url = 1;
inline bool Camera::_internal_has_cam_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Camera::has_cam_url() const {
  return _internal_has_cam_url();
}
inline void Camera::clear_cam_url() {
  cam_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Camera::cam_url() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_url)
  return _internal_cam_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_cam_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cam_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Camera.cam_url)
}
inline std::string* Camera::mutable_cam_url() {
  std::string* _s = _internal_mutable_cam_url();
  // @@protoc_insertion_point(field_mutable:config.Camera.cam_url)
  return _s;
}
inline const std::string& Camera::_internal_cam_url() const {
  return cam_url_.Get();
}
inline void Camera::_internal_set_cam_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cam_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_cam_url() {
  _has_bits_[0] |= 0x00000001u;
  return cam_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Camera::release_cam_url() {
  // @@protoc_insertion_point(field_release:config.Camera.cam_url)
  if (!_internal_has_cam_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = cam_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Camera::set_allocated_cam_url(std::string* cam_url) {
  if (cam_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cam_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cam_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Camera.cam_url)
}

// required string cam_user = 2;
inline bool Camera::_internal_has_cam_user() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Camera::has_cam_user() const {
  return _internal_has_cam_user();
}
inline void Camera::clear_cam_user() {
  cam_user_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Camera::cam_user() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_user)
  return _internal_cam_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_cam_user(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 cam_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Camera.cam_user)
}
inline std::string* Camera::mutable_cam_user() {
  std::string* _s = _internal_mutable_cam_user();
  // @@protoc_insertion_point(field_mutable:config.Camera.cam_user)
  return _s;
}
inline const std::string& Camera::_internal_cam_user() const {
  return cam_user_.Get();
}
inline void Camera::_internal_set_cam_user(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cam_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_cam_user() {
  _has_bits_[0] |= 0x00000002u;
  return cam_user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Camera::release_cam_user() {
  // @@protoc_insertion_point(field_release:config.Camera.cam_user)
  if (!_internal_has_cam_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = cam_user_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_user_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Camera::set_allocated_cam_user(std::string* cam_user) {
  if (cam_user != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cam_user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cam_user,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_user_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Camera.cam_user)
}

// required string cam_pwd = 3;
inline bool Camera::_internal_has_cam_pwd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Camera::has_cam_pwd() const {
  return _internal_has_cam_pwd();
}
inline void Camera::clear_cam_pwd() {
  cam_pwd_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Camera::cam_pwd() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_pwd)
  return _internal_cam_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_cam_pwd(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 cam_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Camera.cam_pwd)
}
inline std::string* Camera::mutable_cam_pwd() {
  std::string* _s = _internal_mutable_cam_pwd();
  // @@protoc_insertion_point(field_mutable:config.Camera.cam_pwd)
  return _s;
}
inline const std::string& Camera::_internal_cam_pwd() const {
  return cam_pwd_.Get();
}
inline void Camera::_internal_set_cam_pwd(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cam_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_cam_pwd() {
  _has_bits_[0] |= 0x00000004u;
  return cam_pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Camera::release_cam_pwd() {
  // @@protoc_insertion_point(field_release:config.Camera.cam_pwd)
  if (!_internal_has_cam_pwd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = cam_pwd_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_pwd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Camera::set_allocated_cam_pwd(std::string* cam_pwd) {
  if (cam_pwd != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cam_pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cam_pwd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_pwd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Camera.cam_pwd)
}

// required bool cam_is_active = 4;
inline bool Camera::_internal_has_cam_is_active() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Camera::has_cam_is_active() const {
  return _internal_has_cam_is_active();
}
inline void Camera::clear_cam_is_active() {
  cam_is_active_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Camera::_internal_cam_is_active() const {
  return cam_is_active_;
}
inline bool Camera::cam_is_active() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_is_active)
  return _internal_cam_is_active();
}
inline void Camera::_internal_set_cam_is_active(bool value) {
  _has_bits_[0] |= 0x00000040u;
  cam_is_active_ = value;
}
inline void Camera::set_cam_is_active(bool value) {
  _internal_set_cam_is_active(value);
  // @@protoc_insertion_point(field_set:config.Camera.cam_is_active)
}

// required string cam_model = 5;
inline bool Camera::_internal_has_cam_model() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Camera::has_cam_model() const {
  return _internal_has_cam_model();
}
inline void Camera::clear_cam_model() {
  cam_model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Camera::cam_model() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_model)
  return _internal_cam_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_cam_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 cam_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Camera.cam_model)
}
inline std::string* Camera::mutable_cam_model() {
  std::string* _s = _internal_mutable_cam_model();
  // @@protoc_insertion_point(field_mutable:config.Camera.cam_model)
  return _s;
}
inline const std::string& Camera::_internal_cam_model() const {
  return cam_model_.Get();
}
inline void Camera::_internal_set_cam_model(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  cam_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_cam_model() {
  _has_bits_[0] |= 0x00000008u;
  return cam_model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Camera::release_cam_model() {
  // @@protoc_insertion_point(field_release:config.Camera.cam_model)
  if (!_internal_has_cam_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = cam_model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Camera::set_allocated_cam_model(std::string* cam_model) {
  if (cam_model != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cam_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cam_model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Camera.cam_model)
}

// optional int32 cam_frame_period = 6 [default = 1000];
inline bool Camera::_internal_has_cam_frame_period() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Camera::has_cam_frame_period() const {
  return _internal_has_cam_frame_period();
}
inline void Camera::clear_cam_frame_period() {
  cam_frame_period_ = 1000;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t Camera::_internal_cam_frame_period() const {
  return cam_frame_period_;
}
inline int32_t Camera::cam_frame_period() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_frame_period)
  return _internal_cam_frame_period();
}
inline void Camera::_internal_set_cam_frame_period(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  cam_frame_period_ = value;
}
inline void Camera::set_cam_frame_period(int32_t value) {
  _internal_set_cam_frame_period(value);
  // @@protoc_insertion_point(field_set:config.Camera.cam_frame_period)
}

// optional int32 cam_prio = 7 [default = 1];
inline bool Camera::_internal_has_cam_prio() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Camera::has_cam_prio() const {
  return _internal_has_cam_prio();
}
inline void Camera::clear_cam_prio() {
  cam_prio_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t Camera::_internal_cam_prio() const {
  return cam_prio_;
}
inline int32_t Camera::cam_prio() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_prio)
  return _internal_cam_prio();
}
inline void Camera::_internal_set_cam_prio(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  cam_prio_ = value;
}
inline void Camera::set_cam_prio(int32_t value) {
  _internal_set_cam_prio(value);
  // @@protoc_insertion_point(field_set:config.Camera.cam_prio)
}

// repeated string cam_roi = 8;
inline int Camera::_internal_cam_roi_size() const {
  return cam_roi_.size();
}
inline int Camera::cam_roi_size() const {
  return _internal_cam_roi_size();
}
inline void Camera::clear_cam_roi() {
  cam_roi_.Clear();
}
inline std::string* Camera::add_cam_roi() {
  std::string* _s = _internal_add_cam_roi();
  // @@protoc_insertion_point(field_add_mutable:config.Camera.cam_roi)
  return _s;
}
inline const std::string& Camera::_internal_cam_roi(int index) const {
  return cam_roi_.Get(index);
}
inline const std::string& Camera::cam_roi(int index) const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_roi)
  return _internal_cam_roi(index);
}
inline std::string* Camera::mutable_cam_roi(int index) {
  // @@protoc_insertion_point(field_mutable:config.Camera.cam_roi)
  return cam_roi_.Mutable(index);
}
inline void Camera::set_cam_roi(int index, const std::string& value) {
  cam_roi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:config.Camera.cam_roi)
}
inline void Camera::set_cam_roi(int index, std::string&& value) {
  cam_roi_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:config.Camera.cam_roi)
}
inline void Camera::set_cam_roi(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cam_roi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:config.Camera.cam_roi)
}
inline void Camera::set_cam_roi(int index, const char* value, size_t size) {
  cam_roi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:config.Camera.cam_roi)
}
inline std::string* Camera::_internal_add_cam_roi() {
  return cam_roi_.Add();
}
inline void Camera::add_cam_roi(const std::string& value) {
  cam_roi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:config.Camera.cam_roi)
}
inline void Camera::add_cam_roi(std::string&& value) {
  cam_roi_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:config.Camera.cam_roi)
}
inline void Camera::add_cam_roi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cam_roi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:config.Camera.cam_roi)
}
inline void Camera::add_cam_roi(const char* value, size_t size) {
  cam_roi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:config.Camera.cam_roi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Camera::cam_roi() const {
  // @@protoc_insertion_point(field_list:config.Camera.cam_roi)
  return cam_roi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Camera::mutable_cam_roi() {
  // @@protoc_insertion_point(field_mutable_list:config.Camera.cam_roi)
  return &cam_roi_;
}

// required string cam_group = 9;
inline bool Camera::_internal_has_cam_group() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Camera::has_cam_group() const {
  return _internal_has_cam_group();
}
inline void Camera::clear_cam_group() {
  cam_group_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Camera::cam_group() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_group)
  return _internal_cam_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_cam_group(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 cam_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Camera.cam_group)
}
inline std::string* Camera::mutable_cam_group() {
  std::string* _s = _internal_mutable_cam_group();
  // @@protoc_insertion_point(field_mutable:config.Camera.cam_group)
  return _s;
}
inline const std::string& Camera::_internal_cam_group() const {
  return cam_group_.Get();
}
inline void Camera::_internal_set_cam_group(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  cam_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_cam_group() {
  _has_bits_[0] |= 0x00000010u;
  return cam_group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Camera::release_cam_group() {
  // @@protoc_insertion_point(field_release:config.Camera.cam_group)
  if (!_internal_has_cam_group()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = cam_group_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_group_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Camera::set_allocated_cam_group(std::string* cam_group) {
  if (cam_group != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cam_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cam_group,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_group_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Camera.cam_group)
}

// required string cam_name = 10;
inline bool Camera::_internal_has_cam_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Camera::has_cam_name() const {
  return _internal_has_cam_name();
}
inline void Camera::clear_cam_name() {
  cam_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Camera::cam_name() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_name)
  return _internal_cam_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Camera::set_cam_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 cam_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Camera.cam_name)
}
inline std::string* Camera::mutable_cam_name() {
  std::string* _s = _internal_mutable_cam_name();
  // @@protoc_insertion_point(field_mutable:config.Camera.cam_name)
  return _s;
}
inline const std::string& Camera::_internal_cam_name() const {
  return cam_name_.Get();
}
inline void Camera::_internal_set_cam_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  cam_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Camera::_internal_mutable_cam_name() {
  _has_bits_[0] |= 0x00000020u;
  return cam_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Camera::release_cam_name() {
  // @@protoc_insertion_point(field_release:config.Camera.cam_name)
  if (!_internal_has_cam_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = cam_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Camera::set_allocated_cam_name(std::string* cam_name) {
  if (cam_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  cam_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cam_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cam_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cam_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Camera.cam_name)
}

// optional int32 cam_frame_height = 11 [default = 1080];
inline bool Camera::_internal_has_cam_frame_height() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Camera::has_cam_frame_height() const {
  return _internal_has_cam_frame_height();
}
inline void Camera::clear_cam_frame_height() {
  cam_frame_height_ = 1080;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t Camera::_internal_cam_frame_height() const {
  return cam_frame_height_;
}
inline int32_t Camera::cam_frame_height() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_frame_height)
  return _internal_cam_frame_height();
}
inline void Camera::_internal_set_cam_frame_height(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  cam_frame_height_ = value;
}
inline void Camera::set_cam_frame_height(int32_t value) {
  _internal_set_cam_frame_height(value);
  // @@protoc_insertion_point(field_set:config.Camera.cam_frame_height)
}

// optional int32 cam_frame_width = 12 [default = 1920];
inline bool Camera::_internal_has_cam_frame_width() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Camera::has_cam_frame_width() const {
  return _internal_has_cam_frame_width();
}
inline void Camera::clear_cam_frame_width() {
  cam_frame_width_ = 1920;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t Camera::_internal_cam_frame_width() const {
  return cam_frame_width_;
}
inline int32_t Camera::cam_frame_width() const {
  // @@protoc_insertion_point(field_get:config.Camera.cam_frame_width)
  return _internal_cam_frame_width();
}
inline void Camera::_internal_set_cam_frame_width(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  cam_frame_width_ = value;
}
inline void Camera::set_cam_frame_width(int32_t value) {
  _internal_set_cam_frame_width(value);
  // @@protoc_insertion_point(field_set:config.Camera.cam_frame_width)
}

// -------------------------------------------------------------------

// CamerasList

// repeated .config.Camera cam = 1;
inline int CamerasList::_internal_cam_size() const {
  return cam_.size();
}
inline int CamerasList::cam_size() const {
  return _internal_cam_size();
}
inline void CamerasList::clear_cam() {
  cam_.Clear();
}
inline ::config::Camera* CamerasList::mutable_cam(int index) {
  // @@protoc_insertion_point(field_mutable:config.CamerasList.cam)
  return cam_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::Camera >*
CamerasList::mutable_cam() {
  // @@protoc_insertion_point(field_mutable_list:config.CamerasList.cam)
  return &cam_;
}
inline const ::config::Camera& CamerasList::_internal_cam(int index) const {
  return cam_.Get(index);
}
inline const ::config::Camera& CamerasList::cam(int index) const {
  // @@protoc_insertion_point(field_get:config.CamerasList.cam)
  return _internal_cam(index);
}
inline ::config::Camera* CamerasList::_internal_add_cam() {
  return cam_.Add();
}
inline ::config::Camera* CamerasList::add_cam() {
  ::config::Camera* _add = _internal_add_cam();
  // @@protoc_insertion_point(field_add:config.CamerasList.cam)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::Camera >&
CamerasList::cam() const {
  // @@protoc_insertion_point(field_list:config.CamerasList.cam)
  return cam_;
}

// -------------------------------------------------------------------

// MotionDetectorParams

// required int32 movdet_color_tresh = 1;
inline bool MotionDetectorParams::_internal_has_movdet_color_tresh() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MotionDetectorParams::has_movdet_color_tresh() const {
  return _internal_has_movdet_color_tresh();
}
inline void MotionDetectorParams::clear_movdet_color_tresh() {
  movdet_color_tresh_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t MotionDetectorParams::_internal_movdet_color_tresh() const {
  return movdet_color_tresh_;
}
inline int32_t MotionDetectorParams::movdet_color_tresh() const {
  // @@protoc_insertion_point(field_get:config.MotionDetectorParams.movdet_color_tresh)
  return _internal_movdet_color_tresh();
}
inline void MotionDetectorParams::_internal_set_movdet_color_tresh(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  movdet_color_tresh_ = value;
}
inline void MotionDetectorParams::set_movdet_color_tresh(int32_t value) {
  _internal_set_movdet_color_tresh(value);
  // @@protoc_insertion_point(field_set:config.MotionDetectorParams.movdet_color_tresh)
}

// required int32 movdet_diff_tresh = 2;
inline bool MotionDetectorParams::_internal_has_movdet_diff_tresh() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MotionDetectorParams::has_movdet_diff_tresh() const {
  return _internal_has_movdet_diff_tresh();
}
inline void MotionDetectorParams::clear_movdet_diff_tresh() {
  movdet_diff_tresh_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t MotionDetectorParams::_internal_movdet_diff_tresh() const {
  return movdet_diff_tresh_;
}
inline int32_t MotionDetectorParams::movdet_diff_tresh() const {
  // @@protoc_insertion_point(field_get:config.MotionDetectorParams.movdet_diff_tresh)
  return _internal_movdet_diff_tresh();
}
inline void MotionDetectorParams::_internal_set_movdet_diff_tresh(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  movdet_diff_tresh_ = value;
}
inline void MotionDetectorParams::set_movdet_diff_tresh(int32_t value) {
  _internal_set_movdet_diff_tresh(value);
  // @@protoc_insertion_point(field_set:config.MotionDetectorParams.movdet_diff_tresh)
}

// optional int32 movdet_timer_period = 3 [default = 30];
inline bool MotionDetectorParams::_internal_has_movdet_timer_period() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MotionDetectorParams::has_movdet_timer_period() const {
  return _internal_has_movdet_timer_period();
}
inline void MotionDetectorParams::clear_movdet_timer_period() {
  movdet_timer_period_ = 30;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t MotionDetectorParams::_internal_movdet_timer_period() const {
  return movdet_timer_period_;
}
inline int32_t MotionDetectorParams::movdet_timer_period() const {
  // @@protoc_insertion_point(field_get:config.MotionDetectorParams.movdet_timer_period)
  return _internal_movdet_timer_period();
}
inline void MotionDetectorParams::_internal_set_movdet_timer_period(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  movdet_timer_period_ = value;
}
inline void MotionDetectorParams::set_movdet_timer_period(int32_t value) {
  _internal_set_movdet_timer_period(value);
  // @@protoc_insertion_point(field_set:config.MotionDetectorParams.movdet_timer_period)
}

// -------------------------------------------------------------------

// Event

// required int32 class_num = 1;
inline bool Event::_internal_has_class_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Event::has_class_num() const {
  return _internal_has_class_num();
}
inline void Event::clear_class_num() {
  class_num_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Event::_internal_class_num() const {
  return class_num_;
}
inline int32_t Event::class_num() const {
  // @@protoc_insertion_point(field_get:config.Event.class_num)
  return _internal_class_num();
}
inline void Event::_internal_set_class_num(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  class_num_ = value;
}
inline void Event::set_class_num(int32_t value) {
  _internal_set_class_num(value);
  // @@protoc_insertion_point(field_set:config.Event.class_num)
}

// required string class_name = 2;
inline bool Event::_internal_has_class_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Event::has_class_name() const {
  return _internal_has_class_name();
}
inline void Event::clear_class_name() {
  class_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Event::class_name() const {
  // @@protoc_insertion_point(field_get:config.Event.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_class_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Event.class_name)
}
inline std::string* Event::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:config.Event.class_name)
  return _s;
}
inline const std::string& Event::_internal_class_name() const {
  return class_name_.Get();
}
inline void Event::_internal_set_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_class_name() {
  _has_bits_[0] |= 0x00000001u;
  return class_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Event::release_class_name() {
  // @@protoc_insertion_point(field_release:config.Event.class_name)
  if (!_internal_has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = class_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    class_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Event::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  class_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    class_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Event.class_name)
}

// optional int32 class_main_timer = 3 [default = 30];
inline bool Event::_internal_has_class_main_timer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Event::has_class_main_timer() const {
  return _internal_has_class_main_timer();
}
inline void Event::clear_class_main_timer() {
  class_main_timer_ = 30;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Event::_internal_class_main_timer() const {
  return class_main_timer_;
}
inline int32_t Event::class_main_timer() const {
  // @@protoc_insertion_point(field_get:config.Event.class_main_timer)
  return _internal_class_main_timer();
}
inline void Event::_internal_set_class_main_timer(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  class_main_timer_ = value;
}
inline void Event::set_class_main_timer(int32_t value) {
  _internal_set_class_main_timer(value);
  // @@protoc_insertion_point(field_set:config.Event.class_main_timer)
}

// optional int32 class_sub_timer = 4 [default = 120];
inline bool Event::_internal_has_class_sub_timer() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Event::has_class_sub_timer() const {
  return _internal_has_class_sub_timer();
}
inline void Event::clear_class_sub_timer() {
  class_sub_timer_ = 120;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Event::_internal_class_sub_timer() const {
  return class_sub_timer_;
}
inline int32_t Event::class_sub_timer() const {
  // @@protoc_insertion_point(field_get:config.Event.class_sub_timer)
  return _internal_class_sub_timer();
}
inline void Event::_internal_set_class_sub_timer(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  class_sub_timer_ = value;
}
inline void Event::set_class_sub_timer(int32_t value) {
  _internal_set_class_sub_timer(value);
  // @@protoc_insertion_point(field_set:config.Event.class_sub_timer)
}

// -------------------------------------------------------------------

// EventHandlerParams

// repeated .config.Event event = 1;
inline int EventHandlerParams::_internal_event_size() const {
  return event_.size();
}
inline int EventHandlerParams::event_size() const {
  return _internal_event_size();
}
inline void EventHandlerParams::clear_event() {
  event_.Clear();
}
inline ::config::Event* EventHandlerParams::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:config.EventHandlerParams.event)
  return event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::Event >*
EventHandlerParams::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:config.EventHandlerParams.event)
  return &event_;
}
inline const ::config::Event& EventHandlerParams::_internal_event(int index) const {
  return event_.Get(index);
}
inline const ::config::Event& EventHandlerParams::event(int index) const {
  // @@protoc_insertion_point(field_get:config.EventHandlerParams.event)
  return _internal_event(index);
}
inline ::config::Event* EventHandlerParams::_internal_add_event() {
  return event_.Add();
}
inline ::config::Event* EventHandlerParams::add_event() {
  ::config::Event* _add = _internal_add_event();
  // @@protoc_insertion_point(field_add:config.EventHandlerParams.event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::Event >&
EventHandlerParams::event() const {
  // @@protoc_insertion_point(field_list:config.EventHandlerParams.event)
  return event_;
}

// -------------------------------------------------------------------

// NNParams

// required float conf_thresh = 1;
inline bool NNParams::_internal_has_conf_thresh() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NNParams::has_conf_thresh() const {
  return _internal_has_conf_thresh();
}
inline void NNParams::clear_conf_thresh() {
  conf_thresh_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float NNParams::_internal_conf_thresh() const {
  return conf_thresh_;
}
inline float NNParams::conf_thresh() const {
  // @@protoc_insertion_point(field_get:config.NNParams.conf_thresh)
  return _internal_conf_thresh();
}
inline void NNParams::_internal_set_conf_thresh(float value) {
  _has_bits_[0] |= 0x00000001u;
  conf_thresh_ = value;
}
inline void NNParams::set_conf_thresh(float value) {
  _internal_set_conf_thresh(value);
  // @@protoc_insertion_point(field_set:config.NNParams.conf_thresh)
}

// required float nms_thresh = 2;
inline bool NNParams::_internal_has_nms_thresh() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NNParams::has_nms_thresh() const {
  return _internal_has_nms_thresh();
}
inline void NNParams::clear_nms_thresh() {
  nms_thresh_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float NNParams::_internal_nms_thresh() const {
  return nms_thresh_;
}
inline float NNParams::nms_thresh() const {
  // @@protoc_insertion_point(field_get:config.NNParams.nms_thresh)
  return _internal_nms_thresh();
}
inline void NNParams::_internal_set_nms_thresh(float value) {
  _has_bits_[0] |= 0x00000002u;
  nms_thresh_ = value;
}
inline void NNParams::set_nms_thresh(float value) {
  _internal_set_nms_thresh(value);
  // @@protoc_insertion_point(field_set:config.NNParams.nms_thresh)
}

// -------------------------------------------------------------------

// Config

// required .config.CamerasList cam_list = 1;
inline bool Config::_internal_has_cam_list() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cam_list_ != nullptr);
  return value;
}
inline bool Config::has_cam_list() const {
  return _internal_has_cam_list();
}
inline void Config::clear_cam_list() {
  if (cam_list_ != nullptr) cam_list_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::config::CamerasList& Config::_internal_cam_list() const {
  const ::config::CamerasList* p = cam_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::config::CamerasList&>(
      ::config::_CamerasList_default_instance_);
}
inline const ::config::CamerasList& Config::cam_list() const {
  // @@protoc_insertion_point(field_get:config.Config.cam_list)
  return _internal_cam_list();
}
inline void Config::unsafe_arena_set_allocated_cam_list(
    ::config::CamerasList* cam_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cam_list_);
  }
  cam_list_ = cam_list;
  if (cam_list) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Config.cam_list)
}
inline ::config::CamerasList* Config::release_cam_list() {
  _has_bits_[0] &= ~0x00000002u;
  ::config::CamerasList* temp = cam_list_;
  cam_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::config::CamerasList* Config::unsafe_arena_release_cam_list() {
  // @@protoc_insertion_point(field_release:config.Config.cam_list)
  _has_bits_[0] &= ~0x00000002u;
  ::config::CamerasList* temp = cam_list_;
  cam_list_ = nullptr;
  return temp;
}
inline ::config::CamerasList* Config::_internal_mutable_cam_list() {
  _has_bits_[0] |= 0x00000002u;
  if (cam_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::config::CamerasList>(GetArenaForAllocation());
    cam_list_ = p;
  }
  return cam_list_;
}
inline ::config::CamerasList* Config::mutable_cam_list() {
  ::config::CamerasList* _msg = _internal_mutable_cam_list();
  // @@protoc_insertion_point(field_mutable:config.Config.cam_list)
  return _msg;
}
inline void Config::set_allocated_cam_list(::config::CamerasList* cam_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cam_list_;
  }
  if (cam_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::config::CamerasList>::GetOwningArena(cam_list);
    if (message_arena != submessage_arena) {
      cam_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cam_list_ = cam_list;
  // @@protoc_insertion_point(field_set_allocated:config.Config.cam_list)
}

// required string server_ip = 2;
inline bool Config::_internal_has_server_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Config::has_server_ip() const {
  return _internal_has_server_ip();
}
inline void Config::clear_server_ip() {
  server_ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Config::server_ip() const {
  // @@protoc_insertion_point(field_get:config.Config.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Config::set_server_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Config.server_ip)
}
inline std::string* Config::mutable_server_ip() {
  std::string* _s = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:config.Config.server_ip)
  return _s;
}
inline const std::string& Config::_internal_server_ip() const {
  return server_ip_.Get();
}
inline void Config::_internal_set_server_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Config::_internal_mutable_server_ip() {
  _has_bits_[0] |= 0x00000001u;
  return server_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Config::release_server_ip() {
  // @@protoc_insertion_point(field_release:config.Config.server_ip)
  if (!_internal_has_server_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = server_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    server_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Config::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    server_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Config.server_ip)
}

// required .config.MotionDetectorParams movdet_params = 3;
inline bool Config::_internal_has_movdet_params() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || movdet_params_ != nullptr);
  return value;
}
inline bool Config::has_movdet_params() const {
  return _internal_has_movdet_params();
}
inline void Config::clear_movdet_params() {
  if (movdet_params_ != nullptr) movdet_params_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::config::MotionDetectorParams& Config::_internal_movdet_params() const {
  const ::config::MotionDetectorParams* p = movdet_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::config::MotionDetectorParams&>(
      ::config::_MotionDetectorParams_default_instance_);
}
inline const ::config::MotionDetectorParams& Config::movdet_params() const {
  // @@protoc_insertion_point(field_get:config.Config.movdet_params)
  return _internal_movdet_params();
}
inline void Config::unsafe_arena_set_allocated_movdet_params(
    ::config::MotionDetectorParams* movdet_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movdet_params_);
  }
  movdet_params_ = movdet_params;
  if (movdet_params) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Config.movdet_params)
}
inline ::config::MotionDetectorParams* Config::release_movdet_params() {
  _has_bits_[0] &= ~0x00000004u;
  ::config::MotionDetectorParams* temp = movdet_params_;
  movdet_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::config::MotionDetectorParams* Config::unsafe_arena_release_movdet_params() {
  // @@protoc_insertion_point(field_release:config.Config.movdet_params)
  _has_bits_[0] &= ~0x00000004u;
  ::config::MotionDetectorParams* temp = movdet_params_;
  movdet_params_ = nullptr;
  return temp;
}
inline ::config::MotionDetectorParams* Config::_internal_mutable_movdet_params() {
  _has_bits_[0] |= 0x00000004u;
  if (movdet_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::config::MotionDetectorParams>(GetArenaForAllocation());
    movdet_params_ = p;
  }
  return movdet_params_;
}
inline ::config::MotionDetectorParams* Config::mutable_movdet_params() {
  ::config::MotionDetectorParams* _msg = _internal_mutable_movdet_params();
  // @@protoc_insertion_point(field_mutable:config.Config.movdet_params)
  return _msg;
}
inline void Config::set_allocated_movdet_params(::config::MotionDetectorParams* movdet_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete movdet_params_;
  }
  if (movdet_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::config::MotionDetectorParams>::GetOwningArena(movdet_params);
    if (message_arena != submessage_arena) {
      movdet_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movdet_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  movdet_params_ = movdet_params;
  // @@protoc_insertion_point(field_set_allocated:config.Config.movdet_params)
}

// required .config.EventHandlerParams eh_params = 4;
inline bool Config::_internal_has_eh_params() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || eh_params_ != nullptr);
  return value;
}
inline bool Config::has_eh_params() const {
  return _internal_has_eh_params();
}
inline void Config::clear_eh_params() {
  if (eh_params_ != nullptr) eh_params_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::config::EventHandlerParams& Config::_internal_eh_params() const {
  const ::config::EventHandlerParams* p = eh_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::config::EventHandlerParams&>(
      ::config::_EventHandlerParams_default_instance_);
}
inline const ::config::EventHandlerParams& Config::eh_params() const {
  // @@protoc_insertion_point(field_get:config.Config.eh_params)
  return _internal_eh_params();
}
inline void Config::unsafe_arena_set_allocated_eh_params(
    ::config::EventHandlerParams* eh_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eh_params_);
  }
  eh_params_ = eh_params;
  if (eh_params) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Config.eh_params)
}
inline ::config::EventHandlerParams* Config::release_eh_params() {
  _has_bits_[0] &= ~0x00000008u;
  ::config::EventHandlerParams* temp = eh_params_;
  eh_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::config::EventHandlerParams* Config::unsafe_arena_release_eh_params() {
  // @@protoc_insertion_point(field_release:config.Config.eh_params)
  _has_bits_[0] &= ~0x00000008u;
  ::config::EventHandlerParams* temp = eh_params_;
  eh_params_ = nullptr;
  return temp;
}
inline ::config::EventHandlerParams* Config::_internal_mutable_eh_params() {
  _has_bits_[0] |= 0x00000008u;
  if (eh_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::config::EventHandlerParams>(GetArenaForAllocation());
    eh_params_ = p;
  }
  return eh_params_;
}
inline ::config::EventHandlerParams* Config::mutable_eh_params() {
  ::config::EventHandlerParams* _msg = _internal_mutable_eh_params();
  // @@protoc_insertion_point(field_mutable:config.Config.eh_params)
  return _msg;
}
inline void Config::set_allocated_eh_params(::config::EventHandlerParams* eh_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete eh_params_;
  }
  if (eh_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::config::EventHandlerParams>::GetOwningArena(eh_params);
    if (message_arena != submessage_arena) {
      eh_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eh_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  eh_params_ = eh_params;
  // @@protoc_insertion_point(field_set_allocated:config.Config.eh_params)
}

// required .config.NNParams nn_params = 5;
inline bool Config::_internal_has_nn_params() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || nn_params_ != nullptr);
  return value;
}
inline bool Config::has_nn_params() const {
  return _internal_has_nn_params();
}
inline void Config::clear_nn_params() {
  if (nn_params_ != nullptr) nn_params_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::config::NNParams& Config::_internal_nn_params() const {
  const ::config::NNParams* p = nn_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::config::NNParams&>(
      ::config::_NNParams_default_instance_);
}
inline const ::config::NNParams& Config::nn_params() const {
  // @@protoc_insertion_point(field_get:config.Config.nn_params)
  return _internal_nn_params();
}
inline void Config::unsafe_arena_set_allocated_nn_params(
    ::config::NNParams* nn_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nn_params_);
  }
  nn_params_ = nn_params;
  if (nn_params) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Config.nn_params)
}
inline ::config::NNParams* Config::release_nn_params() {
  _has_bits_[0] &= ~0x00000010u;
  ::config::NNParams* temp = nn_params_;
  nn_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::config::NNParams* Config::unsafe_arena_release_nn_params() {
  // @@protoc_insertion_point(field_release:config.Config.nn_params)
  _has_bits_[0] &= ~0x00000010u;
  ::config::NNParams* temp = nn_params_;
  nn_params_ = nullptr;
  return temp;
}
inline ::config::NNParams* Config::_internal_mutable_nn_params() {
  _has_bits_[0] |= 0x00000010u;
  if (nn_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::config::NNParams>(GetArenaForAllocation());
    nn_params_ = p;
  }
  return nn_params_;
}
inline ::config::NNParams* Config::mutable_nn_params() {
  ::config::NNParams* _msg = _internal_mutable_nn_params();
  // @@protoc_insertion_point(field_mutable:config.Config.nn_params)
  return _msg;
}
inline void Config::set_allocated_nn_params(::config::NNParams* nn_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nn_params_;
  }
  if (nn_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::config::NNParams>::GetOwningArena(nn_params);
    if (message_arena != submessage_arena) {
      nn_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nn_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nn_params_ = nn_params;
  // @@protoc_insertion_point(field_set_allocated:config.Config.nn_params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
